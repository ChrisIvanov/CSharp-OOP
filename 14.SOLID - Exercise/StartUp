using System;
using System.Linq;
using System.Collections.Generic;

using _14.SOLID___Exercise.Core;
using _14.SOLID___Exercise.Models;
using _14.SOLID___Exercise.Common;
using _14.SOLID___Exercise.Factories;
using _14.SOLID___Exercise.Models.Files;
using _14.SOLID___Exercise.IOManagement;
using _14.SOLID___Exercise.Core.Contracts;
using _14.SOLID___Exercise.Models.Contracts;
using _14.SOLID___Exercise.Models.Enumerations;
using _14.SOLID___Exercise.Models.PathManagement;
using _14.SOLID___Exercise.IOManagement.Contracts;

namespace _14.SOLID___Exercise
{
    class StartUp
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());

            LayoutFactory layoutFactory = new LayoutFactory();
            AppenderFactory appenderFactory = new AppenderFactory();

            IReader reader = new ConsoleReader();
            IWriter writer = new ConsoleWriter();
            IPathManager pathManager = new PathManager("logs", "log.txt");
            IFile file = new LogFile(pathManager);

            ILogger logger = SetUpLogger(n, reader, writer, file, 
                layoutFactory, appenderFactory);

            IEngine engine = new Engine(logger, reader, writer);
        }

        private static ILogger SetUpLogger
            (int appendersCnt, IReader reader, IWriter writer, IFile file,
            LayoutFactory layoutFactory, AppenderFactory appenderFactory)
        {
            HashSet<IAppender> appenders = new HashSet<IAppender>();

            for (int i = 0; i < appendersCnt; i++)
            {
                string[] appendersArgs = Console.ReadLine()
                    .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                    .ToArray();

                string appenderType = appendersArgs[0];
                string layoutType = appendersArgs[1];

                bool hasError = false;
                Level level = ParseLevel(appendersArgs, writer, ref hasError);

                if (hasError)
                {
                    continue;
                }

                try
                {
                    ILayout layout = layoutFactory.CreateLayout(layoutType);

                    IAppender appender = appenderFactory.CreateAppender(appenderType,
                        layout, level, file);
                    appenders.Add(appender);
                }
                catch (InvalidOperationException ioe)
                {
                    Console.WriteLine(ioe.Message);
                }
            }

            ILogger logger = new Logger(appenders);

            return logger;
        }

        private static Level ParseLevel(string[] levelStr, IWriter writer, ref bool hasError)
        {
            Level appenderLevel = Level.INFO;

            if (levelStr.Length == 3)
            {
                bool isEnumValid = Enum.TryParse(typeof(Level), levelStr[2],
                    true, out object enumParsed);

                if (!isEnumValid)
                {
                    writer.WriteLine(GlobalConstants.InvalidLevelType);
                }

                appenderLevel = (Level)enumParsed;
            }

            return appenderLevel;
        }
    }
}
